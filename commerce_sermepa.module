<?php

DEFINE('COMMERCE_SERMEPA_URL_TEST', 'https://sis-t.sermepa.es:25443/sis/realizarPago');
DEFINE('COMMERCE_SERMEPA_URL_LIVE', 'https://sis.sermepa.es/sis/realizarPago');

/**
 * @file
 * Provides a payment method for Drupal Commerce using Sermepa gateway.
 */

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_sermepa_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_sermepa'] = array(
    'base' => 'commerce_sermepa',
    'title' => t('Sermepa Payment'),
    'short_title' => t('Sermepa'),
    'description' => t('Sermepa payment gateway integration'),
    'terminal' => FALSE,
    'offsite' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_sermepa_settings_form($settings = NULL) {
  $form = array();
  $settings = (array) $settings + array(
    'name' => '',
  	'mode' => 'test',
    'Ds_Merchant_Titular' => '',
    'Ds_MerchantCode' => '',
    'Ds_MerchantSignature' => '',
    'Ds_Merchant_Terminal' => '001',
    'currency' => '978',
    'override_url' => '',
    'encryption' => 'sha1-enhanced',
  );

  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Bank Name'),
    '#description' => t('Administrative name for the bank.'),
    '#default_value' => $settings['name'],
    '#size' => 80,
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  $form['mode'] = array(
    '#type' => 'radios',
    '#title' => t('Mode of the transactions'),
    '#default_value' => $settings['mode'],
    '#options' => array('test' => t('Test'), 'live' => t('Live')),
    '#maxlength' => 5,
    '#required' => TRUE,
  );
  $form['Ds_Merchant_Titular'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant Titular'),
    '#default_value' => $settings['Ds_Merchant_Titular'],
    '#size' => 80,
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  $form['Ds_MerchantCode'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant Code'),
    '#default_value' => $settings['Ds_MerchantCode'],
    '#size' => 80,
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  $form['Ds_MerchantSignature'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant Signature'),
    '#default_value' => $settings['Ds_MerchantSignature'],
    '#size' => 80,
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  $form['Ds_Merchant_Terminal'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant Terminal'),
    '#default_value' => $settings['Ds_Merchant_Terminal'],
    '#size' => 5,
    '#maxlength' => 5,
    '#required' => TRUE,
  );
  $form['currency'] = array(
    '#type' => 'radios',
    '#title' => t('Currency'),
    '#default_value' => $settings['currency'],
    '#options' => array(
      '978' => t('Euro'),
      '840' => t('Dollar'),
      '826' => t('Pound'),
    ),
    '#required' => TRUE,
  );

  $form['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced options'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['advanced']['override_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Override bank connect url'),
    '#default_value' => $settings['override_url'],
    '#size' => 80,
    '#maxlength' => 255,
  );
  $form['advanced']['encryption'] = array(
    '#type' => 'radios',
    '#title' => t('Method of encryption'),
    '#default_value' => $settings['encryption'],
    '#options' => array(
      'sha1' => t('SHA'),
      'sha1-enhanced' => t('Enhanced SHA'),
    ),
    '#required' => TRUE,
  );
  return $form;
}

/**
 * Payment method callback: redirect form to sermepa gateway.
 */
function commerce_sermepa_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if the enabling action's settings haven't been configured.
  if (empty($payment_method['settings']['Ds_MerchantCode'])) {
    drupal_set_message(t('Sermepa is not configured for use. Merchant code has not been specified.'), 'error');
    return array();
  }

  if (empty($payment_method['settings']['Ds_MerchantSignature'])) {
    drupal_set_message(t('Sermepa signature is not set for use. Merchant signature has not been specified.'), 'error');
    return array();
  }

  $settings = array(
    // Return to the previous page when payment is canceled
    'cancel_return' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
    // Return to the payment redirect page for processing successful payments
    'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
    // Url of the store.
    'merchant_url' => url('<front>', array('absolute' => TRUE)),
    // Specify the current payment method instance ID in the notify_url
    'payment_method' => $payment_method['instance_id'],
  );

  return commerce_sermepa_order_form($form, $form_state, $order, $payment_method['settings'] + $settings);
}

/**
 * Build the order form for the sermepa.
 *
 * @param $order
 *   The fully loaded order being paid for.
 */
function commerce_sermepa_order_form($form, &$form_state, $order, $settings) {
  $merchant_order = substr(date('ymdHis') . '_' . $order->order_id, -12, 12);
  $transactiontype = '0';

  if ($settings['advanced']['encryption'] == 'sha1-enhanced') {
    $message = $order->commerce_order_total[LANGUAGE_NONE][0]['amount'] . $merchant_order . $settings['Ds_MerchantCode'] . $settings['currency'] . $transactiontype . $settings['merchant_url'] . $settings['Ds_MerchantSignature'];
    $signature = strtoupper(sha1($message));
  }
  elseif($settings['advanced']['encryption'] == 'sha1') {
    module_load_include('inc', 'commerce_sermepa', 'sha1');
    $sha = new SHA1;
    $message = $order->commerce_order_total[LANGUAGE_NONE][0]['amount'] . $merchant_order . $settings['Ds_MerchantCode'] . $settings['currency'] . $settings['Ds_MerchantSignature'];
    $digest1 = $sha->hash_string($message);
    $signature = strtoupper($sha->hash_to_string($digest1));
  }

  // Get the url to connect to.
  if (!empty($settings['advanced']['override_url'])) {
    $url = $settings['override_url'];
  }
  elseif ($settings['mode'] == 'live') {
    $url = COMMERCE_SERMEPA_URL_LIVE;
  }
  else {
    $url = COMMERCE_SERMEPA_URL_TEST;
  }

  $hidden_fields = array(
    'Ds_Merchant_Amount' => $order->commerce_order_total[LANGUAGE_NONE][0]['amount'],
  	'Ds_Merchant_Currency' => $settings['currency'],
    'Ds_Merchant_Order' => $merchant_order,
  	'Ds_Merchant_Titular' => $settings['Ds_Merchant_Titular'],
    'Ds_Merchant_MerchantName' => $settings['Ds_Merchant_Titular'],
  	'Ds_Merchant_MerchantCode' => $settings['Ds_MerchantCode'],
    'Ds_Merchant_MerchantURL' => $settings['merchant_url'],
  	'Ds_Merchant_UrlOK' => $settings['return'],
    'Ds_Merchant_UrlKO' => $settings['cancel_return'],
  	'Ds_Merchant_ConsumerLanguage' => 1,
  	'Ds_Merchant_TransactionType' => $transactiontype,
  	'Ds_Merchant_MerchantSignature' => $signature,
  	'Ds_Merchant_Terminal' => $settings['Ds_Merchant_Terminal'],
  );

  $form['#action'] = $url;

  // Create hidden fields.
  foreach ($hidden_fields as $name => $value) {
    $form[$name] = array(
      '#type' => 'hidden',
      '#value' => $value,
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Redirect to Sermepa platform'),
  );

  return $form;
}

/**
 * Implements hook_redirect_form_validate.
 */
function commerce_sermepa_redirect_form_validate($order, $payment_method) {
  $response = $_GET;

  $message = $order->commerce_order_total[LANGUAGE_NONE][0]['amount']. $response['Ds_Order']. $response['Ds_MerchantCode']. $response['Ds_Currency']. $response['Ds_Response']. $payment_method['settings']['Ds_MerchantSignature'];

  if ($response['Ds_Signature'] != strtoupper(sha1($message))) {
    watchdog('commerce_sermepa', t('Signature for the payment doesn\'t match'), array(), WATCHDOG_ERROR);
    return FALSE;
  }

  if (empty($response['Ds_AuthorisationCode'])) {
    watchdog('commerce_sermepa', t('No authorisation code for the transaction'), array(), WATCHDOG_ERROR);
    return FALSE;
  }

  // Handle the response of the bank.
  // TODO: Specify the errors returned by the payment gateway.
  $sermepa_response = _commerce_sermepa_response($response['Ds_Response']);
  if ($sermepa_response == 'ERROR') {
    watchdog('commerce_sermepa', t('Failure in the payment transaction'), array(), WATCHDOG_ERROR);
    commerce_sermepa_transaction($payment_method, $order, $response, COMMERCE_PAYMENT_STATUS_FAILURE);
  }

  // Process the payment.
  commerce_sermepa_transaction($payment_method, $order, $response, COMMERCE_PAYMENT_STATUS_SUCCESS);
  return TRUE;
}

/**
 * Handle the response of the payment transaction.
 */
function _commerce_sermepa_response($response = NULL) {
  if ((int)$response <= 99) {
    return 'AUTHORIZED';
  }
  // TODO: Specify the error message by the docs.
  return 'ERROR';
}

/**
 * Save the payment transaction for the order.
 */
function commerce_sermepa_transaction($payment_method, $order, $response, $transaction_status) {
  $transaction = commerce_payment_transaction_new('commerce_sermepa', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $order->commerce_order_total[LANGUAGE_NONE][0]['amount'];
  $transaction->currency_code = $order->commerce_order_total[LANGUAGE_NONE][0]['currency_code'];
  $transaction->remote_id = $response['Ds_AuthorisationCode'];

  $transaction->status = $transaction_status;
  if ($transaction_status == COMMERCE_PAYMENT_STATUS_SUCCESS) {
    $transaction->message = 'Transaction accepted with id @transaction_id';
  }
  elseif ($transaction_status == COMMERCE_PAYMENT_STATUS_FAILURE) {
    $transaction->message = 'Error for the transaction with id @transaction_id';
  }
  $transaction->message_variables = array(
    '@transaction_id' => $response['Ds_AuthorisationCode'],
  );
  commerce_payment_transaction_save($transaction);
}
